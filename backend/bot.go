package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"strconv"
	"time"
)

type ResponseT struct {
	Ok     bool `json:"ok"`
	Result []struct {
		UpdateID int `json:"update_id"`
		Message  struct {
			MessageID int `json:"message_id"`
			From      struct {
				ID           int    `json:"id"`
				IsBot        bool   `json:"is_bot"`
				FirstName    string `json:"first_name"`
				LastName     string `json:"last_name"`
				Username     string `json:"username"`
				LanguageCode string `json:"language_code"`
			} `json:"from"`
			Chat struct {
				ID        int    `json:"id"`
				FirstName string `json:"first_name"`
				LastName  string `json:"last_name"`
				Username  string `json:"username"`
				Type      string `json:"type"`
			} `json:"chat"`
			Date    int `json:"date"`
			Contact struct {
				PhoneNumber string `json:"phone_number"`
			} `json:"contact"`
			Text string `json:"text"`
			Data string `json:"data"`
		} `json:"message"`
	} `json:"result"`
}

type InlineButton struct {
	Ok     bool `json:"ok"`
	Result []struct {
		UpdateID      int `json:"update_id"`
		CallbackQuery struct {
			ID   string `json:"id"`
			From struct {
				ID           int    `json:"id"`
				IsBot        bool   `json:"is_bot"`
				FirstName    string `json:"first_name"`
				Username     string `json:"username"`
				LanguageCode string `json:"language_code"`
			} `json:"from"`
			Message struct {
				MessageID int `json:"message_id"`
				From      struct {
					ID        int64  `json:"id"`
					IsBot     bool   `json:"is_bot"`
					FirstName string `json:"first_name"`
					Username  string `json:"username"`
				} `json:"from"`
				Chat struct {
					ID        int    `json:"id"`
					FirstName string `json:"first_name"`
					Username  string `json:"username"`
					Type      string `json:"type"`
				} `json:"chat"`
				Date        int    `json:"date"`
				Text        string `json:"text"`
				ReplyMarkup struct {
					InlineKeyboard [][]struct {
						Text         string `json:"text"`
						CallbackData string `json:"callback_data"`
					} `json:"inline_keyboard"`
				} `json:"reply_markup"`
			} `json:"message"`
			ChatInstance string `json:"chat_instance"`
			Data         string `json:"data"`
		} `json:"callback_query"`
	} `json:"result"`
}

type UserT struct {
	ID          string
	FirstName   string
	LastName    string
	RegDate     int
	PhoneNumber string
}

var host string = "https://api.telegram.org/bot"
var token string = "6037986461:AAG-K9ROPEYYXEGMBZIgs_w8Qlvm44bnOzw"

func main() {

	lastMessage := 0

	for range time.Tick(time.Second * 1) {

		//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
		var url string = host + token + "/getUpdates?offset=" + strconv.Itoa(lastMessage)
		response, err := http.Get(url)
		if err != nil {
			fmt.Println(err)
		}
		data, _ := ioutil.ReadAll(response.Body)

		//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ
		fmt.Println(string(data))

		// var responseObj ResponseT
		//–ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json
		var responseObj ResponseT
		json.Unmarshal(data, &responseObj)

		var need InlineButton
		json.Unmarshal(data, &need)
		//fmt.Println(responseObj)

		//—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		number := len(responseObj.Result)

		//–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç - —Ç–æ –¥–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
		if number < 1 {
			continue
		}

		//–≤ —Ü–∏–∫–ª–µ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–Ω–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
		for i := 0; i < number; i++ {

			text := responseObj.Result[i].Message.Text
			chatId := responseObj.Result[i].Message.From.ID
			messageTime := responseObj.Result[i].Message.Date
			firstName := responseObj.Result[i].Message.From.FirstName
			button := need.Result[i].CallbackQuery.Data
			id := need.Result[i].CallbackQuery.From.ID
			mesId := need.Result[i].CallbackQuery.Message.MessageID

			//–ø–∏—à–µ–º –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫—É ----------- –º–æ–∑–≥–∏

			//–æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			go sendMessage(chatId, id, mesId, messageTime, text, firstName, button)

		}

		//–∑–∞–ø–æ–º–∏–Ω–∞–µ–º update_id  –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		lastMessage = responseObj.Result[number-1].UpdateID + 1

	}
}

func sendMessage(chatId int, id int, mesId int, messageTime int, text string, firstName string, button string) {

	if text == "/start" {

		buttons := [][]map[string]interface{}{
			{{"text": "–û–±–æ –º–Ω–µ üë®üèª‚Äçüíª", "callback_data": "about"}},
			{{"text": "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã üéØ", "callback_data": "works"}},
			{{"text": "–ú–æ—ë —Ä–µ–∑—é–º–µ üìã", "callback_data": "resume"}},
			{{"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±", "callback_data": "contacts"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + firstName + "! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–æ—ë–º –±–æ—Ç–µ. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –æ–±–æ –º–Ω–µ&reply_markup=" + string(inlineKeyboardJSON))

	}

	if button == "back" {
		buttons := [][]map[string]interface{}{
			{{"text": "–û–±–æ –º–Ω–µ üë®üèª‚Äçüíª", "callback_data": "about"}},
			{{"text": "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã üéØ", "callback_data": "works"}},
			{{"text": "–ú–æ—ë —Ä–µ–∑—é–º–µ üìã", "callback_data": "resume"}},
			{{"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±", "callback_data": "contacts"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ß—Ç–æ –µ—â—ë –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?&reply_markup=" + string(inlineKeyboardJSON))
	}

	if button == "about" {

		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		imagePath := "backend/me.jpg"
		// –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
		bodyBuf := &bytes.Buffer{}
		bodyWriter := multipart.NewWriter(bodyBuf)

		// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		file, err := os.Open(imagePath)
		if err != nil {
			log.Fatal(err)
		}
		defer file.Close()

		// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ñ–∞–π–ª–∞
		fileWriter, err := bodyWriter.CreateFormFile("photo", filepath.Base(imagePath))
		if err != nil {
			log.Fatal(err)
		}

		// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º—É
		_, err = io.Copy(fileWriter, file)
		if err != nil {
			log.Fatal(err)
		}

		// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
		contentType := bodyWriter.FormDataContentType()
		bodyWriter.Close()

		// –°–æ–∑–¥–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞
		apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendPhoto?chat_id=%s&caption=–Ø Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–±–ª–∞–¥–∞—é—â–∏–π –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫–∞–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (frontend), —Ç–∞–∫ –∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ (backend). –Ø –∑–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –≤–ª–∞–¥–µ—é —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —è —Ä–∞–±–æ—Ç–∞—é —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ HTML, CSS –∏ JavaScript. –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —è –∑–∞–Ω–∏–º–∞—é—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –±—ç–∫–µ–Ω–¥-–ª–æ–≥–∏–∫–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –Ø —Ä–∞–±–æ—Ç–∞—é —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Golang –∏–ª–∏ PHP. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –∑–Ω–∞–∫–æ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL –∏ —É–º–µ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ–π. –Ø —Ç–∞–∫–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π Git. –ö–∞–∫ Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ&reply_markup="+string(inlineKeyboardJSON), token, strconv.Itoa(id))
		requestURL, err := url.Parse(apiURL)
		if err != nil {
			log.Fatal(err)
		}

		// –°–æ–∑–¥–∞–Ω–∏–µ HTTP POST-–∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
		request, err := http.NewRequest("POST", requestURL.String(), bodyBuf)
		if err != nil {
			log.Fatal(err)
		}
		request.Header.Set("Content-Type", contentType)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
		client := &http.Client{}
		response, err := client.Do(request)
		if err != nil {
			log.Fatal(err)
		}
		defer response.Body.Close()

		// –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
		responseData, err := ioutil.ReadAll(response.Body)
		if err != nil {
			log.Fatal(err)
		}

		// –í—ã–≤–æ–¥ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
		finalURL := request.URL.String()
		fmt.Println("Final URL:", finalURL)

		// –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
		fmt.Println("Response:", string(responseData))

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
	}

	if button == "works" {
		buttons := [][]map[string]interface{}{
			{{"text": "–ü—Ä–æ–µ–∫—Ç—ã üëÄ", "callback_data": "resume"}},
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–Ø –∏–º–µ—é –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏, –ª–µ–Ω–¥–∏–Ω–≥–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –±–æ—Ç–æ–≤. –í–µ—Å—å –ø–µ—Ä–µ—á–µ–Ω—å –º–æ–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –º–æ—ë–º —Ä–µ–∑—é–º–µ. &reply_markup=" + string(inlineKeyboardJSON))
	}

	if button == "resume" {
		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—ë –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ: https://rodion-de-front.github.io/rodionka.site/&reply_markup=" + string(inlineKeyboardJSON))
	}

	if button == "contacts" {
		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π. VK: https://vk.com/fantom_uk Telegram: @rodionaka –¢–µ–ª–µ—Ñ–æ–Ω: +7 (916) 762-53-03&reply_markup=" + string(inlineKeyboardJSON))
	}

}

// func sendMessage(chatId int, messageTime int, text, firstName string) {

// 	fmt.Println(text)

// 	if text == "/start" {

// 		keys := [][]map[string]interface{}{
// 			{{"text": "–û–±–æ –º–Ω–µ"}},
// 			{{"text": "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã"}},
// 			{{"text": "–ú–æ—ë —Ä–µ–∑—é–º–µ"}},
// 			{{"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã"}},
// 		}
// 		replyKeyboard := map[string]interface{}{
// 			"keyboard":          keys,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		keyboardJson, _ := json.Marshal(replyKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + firstName + "! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–æ—ë–º –±–æ—Ç–µ. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ—Ä–æ—Å—ã –æ–±–æ –º–Ω–µ&reply_markup=" + string(keyboardJson))

// 	}

// 	if text == "–ù–∞–∑–∞–¥" {

// 		keys := [][]map[string]interface{}{
// 			{{"text": "–û–±–æ –º–Ω–µ"}},
// 			{{"text": "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã"}},
// 			{{"text": "–ú–æ—ë —Ä–µ–∑—é–º–µ"}},
// 			{{"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã"}},
// 		}
// 		replyKeyboard := map[string]interface{}{
// 			"keyboard":          keys,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		keyboardJson, _ := json.Marshal(replyKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ß—Ç–æ –≤—ã –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ?&reply_markup=" + string(keyboardJson))

// 	}

// 	if text == "–û–±–æ –º–Ω–µ" {
// 		// –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ª—é–±–∞—è –∫–Ω–æ–ø–∫–∞
// 		backButton := [][]map[string]interface{}{
// 			{{"text": "–ù–∞–∑–∞–¥"}},
// 		}
// 		backKeyboard := map[string]interface{}{
// 			"keyboard":          backButton,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		backKeyboardJson, _ := json.Marshal(backKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text= –Ø Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–±–ª–∞–¥–∞—é—â–∏–π –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫–∞–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (frontend), —Ç–∞–∫ –∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ (backend). –Ø –∑–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –≤–ª–∞–¥–µ—é —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —è —Ä–∞–±–æ—Ç–∞—é —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ HTML, CSS –∏ JavaScript. –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —è –∑–∞–Ω–∏–º–∞—é—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –±—ç–∫–µ–Ω–¥-–ª–æ–≥–∏–∫–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –Ø —Ä–∞–±–æ—Ç–∞—é —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Golang –∏–ª–∏ PHP. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –∑–Ω–∞–∫–æ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL –∏ —É–º–µ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ–π. –Ø —Ç–∞–∫–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π Git. –ö–∞–∫ Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ." + "&reply_markup=" + string(backKeyboardJson))

// 	}

// 	if text == "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã" {

// 		// –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ª—é–±–∞—è –∫–Ω–æ–ø–∫–∞
// 		backButton := [][]map[string]interface{}{
// 			{{"text": "–ù–∞–∑–∞–¥"}},
// 		}
// 		backKeyboard := map[string]interface{}{
// 			"keyboard":          backButton,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		backKeyboardJson, _ := json.Marshal(backKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—ë –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ: https://rodion-de-front.github.io/rodionka.site/" + "&reply_markup=" + string(backKeyboardJson))
// 	}

// 	if text == "–ú–æ—ë —Ä–µ–∑—é–º–µ" {
// 		// –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ª—é–±–∞—è –∫–Ω–æ–ø–∫–∞
// 		backButton := [][]map[string]interface{}{
// 			{{"text": "–ù–∞–∑–∞–¥"}},
// 		}
// 		backKeyboard := map[string]interface{}{
// 			"keyboard":          backButton,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		backKeyboardJson, _ := json.Marshal(backKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—ë –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ: https://rodion-de-front.github.io/rodionka.site/" + "&reply_markup=" + string(backKeyboardJson))

// 	}

// 	if text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã" {
// 		// –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ª—é–±–∞—è –∫–Ω–æ–ø–∫–∞
// 		backButton := [][]map[string]interface{}{
// 			{{"text": "–ù–∞–∑–∞–¥"}},
// 		}
// 		backKeyboard := map[string]interface{}{
// 			"keyboard":          backButton,
// 			"resize_keyboard":   true,
// 			"one_time_keyboard": true,
// 		}
// 		backKeyboardJson, _ := json.Marshal(backKeyboard)
// 		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π. VK: https://vk.com/fantom_uk Telegram: @rodionaka –¢–µ–ª–µ—Ñ–æ–Ω: +7 (916) 762-53-03" + "&reply_markup=" + string(backKeyboardJson))

// 	}
// }
